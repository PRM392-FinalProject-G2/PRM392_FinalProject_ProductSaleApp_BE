// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ProductSaleApp.Repository.Models;

namespace ProductSaleApp.Repository.DBContext;

public partial class SalesAppDBContext : DbContext
{
    public SalesAppDBContext(DbContextOptions<SalesAppDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<Cartitem> Cartitems { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Chatmessage> Chatmessages { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Productvoucher> Productvouchers { get; set; }

    public virtual DbSet<Storelocation> Storelocations { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Uservoucher> Uservouchers { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    public virtual DbSet<Wishlist> Wishlists { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Brand>(entity =>
        {
            entity.HasKey(e => e.Brandid).HasName("brands_pkey");

            entity.ToTable("brands");

            entity.Property(e => e.Brandid).HasColumnName("brandid");
            entity.Property(e => e.Brandname)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("brandname");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Logourl)
                .HasMaxLength(255)
                .HasColumnName("logourl");
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.Cartid).HasName("carts_pkey");

            entity.ToTable("carts");

            entity.Property(e => e.Cartid).HasColumnName("cartid");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Totalprice)
                .HasPrecision(18, 2)
                .HasColumnName("totalprice");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.User).WithMany(p => p.Carts)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("carts_userid_fkey");
        });

        modelBuilder.Entity<Cartitem>(entity =>
        {
            entity.HasKey(e => e.Cartitemid).HasName("cartitems_pkey");

            entity.ToTable("cartitems");

            entity.Property(e => e.Cartitemid).HasColumnName("cartitemid");
            entity.Property(e => e.Cartid).HasColumnName("cartid");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Quantity).HasColumnName("quantity");

            entity.HasOne(d => d.Cart).WithMany(p => p.Cartitems)
                .HasForeignKey(d => d.Cartid)
                .HasConstraintName("cartitems_cartid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.Cartitems)
                .HasForeignKey(d => d.Productid)
                .HasConstraintName("cartitems_productid_fkey");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Categoryid).HasName("categories_pkey");

            entity.ToTable("categories");

            entity.Property(e => e.Categoryid).HasColumnName("categoryid");
            entity.Property(e => e.Categoryname)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("categoryname");
            entity.Property(e => e.Imageurl)
                .HasMaxLength(255)
                .HasColumnName("imageurl");
        });

        modelBuilder.Entity<Chatmessage>(entity =>
        {
            entity.HasKey(e => e.Chatmessageid).HasName("chatmessages_pkey");

            entity.ToTable("chatmessages");

            entity.Property(e => e.Chatmessageid).HasColumnName("chatmessageid");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.Receiverid).HasColumnName("receiverid");
            entity.Property(e => e.Senderid).HasColumnName("senderid");
            entity.Property(e => e.Sentat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sentat");

            entity.HasOne(d => d.Receiver).WithMany(p => p.ChatmessageReceivers)
                .HasForeignKey(d => d.Receiverid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("chatmessages_receiverid_fkey");

            entity.HasOne(d => d.Sender).WithMany(p => p.ChatmessageSenders)
                .HasForeignKey(d => d.Senderid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("chatmessages_senderid_fkey");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Notificationid).HasName("notifications_pkey");

            entity.ToTable("notifications");

            entity.Property(e => e.Notificationid).HasColumnName("notificationid");
            entity.Property(e => e.Createdat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("createdat");
            entity.Property(e => e.Isread)
                .HasDefaultValue(false)
                .HasColumnName("isread");
            entity.Property(e => e.Message)
                .HasMaxLength(255)
                .HasColumnName("message");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("notifications_userid_fkey");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Orderid).HasName("orders_pkey");

            entity.ToTable("orders");

            entity.Property(e => e.Orderid).HasColumnName("orderid");
            entity.Property(e => e.Billingaddress)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("billingaddress");
            entity.Property(e => e.Cartid).HasColumnName("cartid");
            entity.Property(e => e.Orderdate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("orderdate");
            entity.Property(e => e.Orderstatus)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("orderstatus");
            entity.Property(e => e.Paymentmethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("paymentmethod");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.Cart).WithMany(p => p.Orders)
                .HasForeignKey(d => d.Cartid)
                .HasConstraintName("orders_cartid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("orders_userid_fkey");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Paymentid).HasName("payments_pkey");

            entity.ToTable("payments");

            entity.Property(e => e.Paymentid).HasColumnName("paymentid");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Orderid).HasColumnName("orderid");
            entity.Property(e => e.Paymentdate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("paymentdate");
            entity.Property(e => e.Paymentstatus)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("paymentstatus");

            entity.HasOne(d => d.Order).WithMany(p => p.Payments)
                .HasForeignKey(d => d.Orderid)
                .HasConstraintName("payments_orderid_fkey");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Productid).HasName("products_pkey");

            entity.ToTable("products");

            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Brandid).HasColumnName("brandid");
            entity.Property(e => e.Briefdescription)
                .HasMaxLength(255)
                .HasColumnName("briefdescription");
            entity.Property(e => e.Categoryid).HasColumnName("categoryid");
            entity.Property(e => e.Fulldescription).HasColumnName("fulldescription");
            entity.Property(e => e.Imageurl)
                .HasMaxLength(255)
                .HasColumnName("imageurl");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.Productname)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("productname");
            entity.Property(e => e.Technicalspecifications).HasColumnName("technicalspecifications");

            entity.HasOne(d => d.Brand).WithMany(p => p.Products)
                .HasForeignKey(d => d.Brandid)
                .HasConstraintName("products_brandid_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.Categoryid)
                .HasConstraintName("products_categoryid_fkey");
        });

        modelBuilder.Entity<Productvoucher>(entity =>
        {
            entity.HasKey(e => e.Productvoucherid).HasName("productvouchers_pkey");

            entity.ToTable("productvouchers");

            entity.HasIndex(e => new { e.Voucherid, e.Productid }, "uq_productvoucher").IsUnique();

            entity.Property(e => e.Productvoucherid).HasColumnName("productvoucherid");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Voucherid).HasColumnName("voucherid");

            entity.HasOne(d => d.Product).WithMany(p => p.Productvouchers)
                .HasForeignKey(d => d.Productid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("productvouchers_productid_fkey");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Productvouchers)
                .HasForeignKey(d => d.Voucherid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("productvouchers_voucherid_fkey");
        });

        modelBuilder.Entity<Storelocation>(entity =>
        {
            entity.HasKey(e => e.Locationid).HasName("storelocations_pkey");

            entity.ToTable("storelocations");

            entity.Property(e => e.Locationid).HasColumnName("locationid");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Latitude)
                .HasPrecision(9, 6)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasPrecision(9, 6)
                .HasColumnName("longitude");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Userid).HasName("users_pkey");

            entity.ToTable("users");

            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Avatarurl)
                .HasMaxLength(255)
                .HasColumnName("avatarurl");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Passwordhash)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("passwordhash");
            entity.Property(e => e.Phonenumber)
                .HasMaxLength(15)
                .HasColumnName("phonenumber");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("role");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");
        });

        modelBuilder.Entity<Uservoucher>(entity =>
        {
            entity.HasKey(e => e.Uservoucherid).HasName("uservouchers_pkey");

            entity.ToTable("uservouchers");

            entity.HasIndex(e => new { e.Userid, e.Voucherid }, "uq_uservoucher").IsUnique();

            entity.Property(e => e.Uservoucherid).HasColumnName("uservoucherid");
            entity.Property(e => e.Assignedat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("assignedat");
            entity.Property(e => e.Isused)
                .HasDefaultValue(false)
                .HasColumnName("isused");
            entity.Property(e => e.Orderid).HasColumnName("orderid");
            entity.Property(e => e.Usedat)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("usedat");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.Voucherid).HasColumnName("voucherid");

            entity.HasOne(d => d.Order).WithMany(p => p.Uservouchers)
                .HasForeignKey(d => d.Orderid)
                .HasConstraintName("uservouchers_orderid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Uservouchers)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("uservouchers_userid_fkey");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Uservouchers)
                .HasForeignKey(d => d.Voucherid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("uservouchers_voucherid_fkey");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.Voucherid).HasName("vouchers_pkey");

            entity.ToTable("vouchers");

            entity.HasIndex(e => e.Code, "vouchers_code_key").IsUnique();

            entity.Property(e => e.Voucherid).HasColumnName("voucherid");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Discountamount)
                .HasPrecision(18, 2)
                .HasColumnName("discountamount");
            entity.Property(e => e.Discountpercent)
                .HasPrecision(5, 2)
                .HasColumnName("discountpercent");
            entity.Property(e => e.Enddate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("enddate");
            entity.Property(e => e.Isactive)
                .HasDefaultValue(true)
                .HasColumnName("isactive");
            entity.Property(e => e.Startdate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<Wishlist>(entity =>
        {
            entity.HasKey(e => e.Wishlistid).HasName("wishlists_pkey");

            entity.ToTable("wishlists");

            entity.HasIndex(e => new { e.Userid, e.Productid }, "uq_wishlist").IsUnique();

            entity.Property(e => e.Wishlistid).HasColumnName("wishlistid");
            entity.Property(e => e.Createdat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("createdat");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.Product).WithMany(p => p.Wishlists)
                .HasForeignKey(d => d.Productid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("wishlists_productid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Wishlists)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("wishlists_userid_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}